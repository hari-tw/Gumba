{"radar_data" : [
                 {"tip":"DBDeploy","name":"Automate Database Deployment", "pc":{"r":90,"t":135},"movement":"c", "description": "When moving to continuous delivery, deployment of database changes should also be automated so that the application release that relies on those changes does not have to wait for manual deployment of the database changes. Automated database deployment ensures that the full cycle of deploying application and database changes is automated. "},
                 {"tip":"Coding..","name":"Coding architects", "pc":{"r":70,"t":175},"movement":"c", "description": "Awesome!"},
                 {"tip":"CD","name":"Continuous Delivery", "pc":{"r":145,"t":175},"movement":"c", "description": "If you are wondering “What comes after agile?,” you should look towards continuous delivery. While your development processes may be fully optimized, it still might take your organization weeks or months to get a single change into production. Continuous delivery focuses on maximizing automation including infrastructure as code, environment management and deployment automation to ensure your system is always ready for production. It is about tightening your feedback loops and not putting off anything until the end. Continuous delivery is not the same as continuous deployment, which means deploying every change to production. Continuous delivery is not a cowboy show. It puts you in charge of your production environment. The business can pick and choose what and when to deploy. If you think you’ve nailed agile development, but aren’t considering how to achieve continuous delivery, you really haven’t even started. "},
                 {"tip":"DataViz","name":"Data visualizations of development and operations", "pc":{"r":75,"t":148},"movement":"c", "description": "We have long advocated for both static and dynamic code analysis tools to help glean information about your code base. As the focus of software development broadens because of the Continuous Delivery movement, data visualizations of development and operations with effective, actionable profiling and monitoring should be part of your technical stack as well. "},
                 {"tip":"DevOps","name":"DevOps", "pc":{"r":90,"t":157},"movement":"c", "description": "Improving the interactions and relationship between development and IT operations gives us more effective delivery and production systems that are more stable and maintainable. Creating a DevOps culture requires attention to team organization, work practices, reporting lines, and incentives - leading to joint responsibility for faster and safer delivery. We recommend adopting DevOps because we cannot see any situation where attention in this area will not have a positive benefit. "},
                 {"tip":"EmerDesign","name":"Emergent design", "pc":{"r":75,"t":100},"movement":"c", "description": " Emergent design is one of the more advanced aspects of agile engineering practices, and therefore an area of active research & development. We have identified at least two facets of emergent design: the Lean software principle of “last responsible moment”, which mostly applies to greenfield projects, and “finding & harvesting idiomatic patterns”, which is more applicable to existing projects."},
                 {"tip":"EvolArch","name":"Evolutionary architecture", "pc":{"r":140,"t":112},"movement":"c", "description": "We recommend adopting evolutionary architecture as an alternative to traditional up front, heavy-weight enterprise architectural designs. Such architectures should be driven by the underlying technical requirements of the system, rather than speculative planning for a future that may change. "},
                 {"tip":"EvolDB","name":"Evolutionary database", "pc":{"r":50,"t":158},"movement":"c", "description": "If the rate at which business is changing is an indicator of change in requirements, then the days of doing upfront database design are gone. Instead, projects should follow evolutionary database techniques and continue to change their database schemas as new requirements are implemented over the course of the project. Deployment of database changes should also be automated so that the application release that relies on those changes does not have to wait for manual deployment of the database changes."},
                 {"tip":"HCPages","name":"We have found adding simple health check pages to applications is incredibly useful. This allows people to quickly understand the health of an individual node. We often extend them to add metrics like the number of orders placed, error rates, or similar information. Using simple embedded web servers, even non-web based services can easily expose internal information over HTTP. By using microformats, these web pages can easily be scraped by other monitoring tools to become part of holistic monitoring. ", "pc":{"r":75,"t":115},"movement":"t", "description": "Awesome!"},
                 {"tip":"PerfTrend","name":"Simple Performance Trending", "pc":{"r":70,"t":130},"movement":"c", "description": "Starting performance tests late in a project is risky and costly. Very simple performance tests that exercise key parts of the system, run on a regular basis, are good enough to track trends, so we can react if we see a change in performance. Run these tests with your build or as an overnight job and graph the results to create simple performance trending. Complex performance tests in a truly representative environment are still useful, but don’t wait for them to start understanding how the performance of your code is changing. "},
                 {"tip":"Test","name":"Test at the appropriate level", "pc":{"r":75,"t":92},"movement":"t", "description": "The advent of behavior driven design (BDD) testing frameworks like Cucumber, combined with browser automation tools like Selenium, has encouraged widespread use of acceptance testing at the browser level. This unfortunately encouraged doing the bulk of testing where the cost to run the tests is the greatest. Instead, we should test at the appropriate level, as close to the code as possible, so that tests can be run with maximum efficiency. Browser-level tests should be the icing on the cake, supported by acceptance and unit tests executed at appropriate layers. "},
                 {"tip":"ACJourneys","name":"Acceptance Test of Journeys", "pc":{"r":165,"t":135},"movement":"c", "description": "Story level testing can lead to a focus on completing individual stories instead of coherent functionality. It tends to produce a large, hard to maintain test suite which runs slowly, delaying the feedback loop. The alternative is user journeys, which are groupings of user stories into sets of user interactions that provide value for both users and the business. Automating these into a suite leads to tests which hold their intent for longer periods of time and whose failure reveals a failure in the application's ability to deliver concrete value to its users. "},
                 {"tip":"Agile...","name":"Applying agile methods to data warehousing, business intelligence and agile analytics provides better return and improved business responsiveness. This is done by applying lightweight technologies like REST services to move data around in near real-time instead of batch updates. This allows information about customer behavior and application usage to be derived and responses incorporated within the applications for better user experience and data visualization.", "pc":{"r":212,"t":132},"movement":"t", "description": "Awesome!"},
                 {"tip":"OwnRadar","name":"Build your own radar", "pc":{"r":200,"t":162},"movement":"c", "description": "Building your own technology radar helps you decide, normalize, and publicize consensus technology views for all interested parties. ThoughtWorks produces a technology radar for clients and friends, telling the world our opinions about upcoming technology trends. You should do this for your own company as well. Too many decisions in large companies happen in a vacuum, with no input from the technologists who have to live with them every day."},
                 {"tip":"TechDebt","name":"Categorization & Prioritization of Technical Debt", "pc":{"r":245,"t":95},"movement":"c", "description": "Awesome!"},
                 {"tip":"Embedded...","name":"Embedding a servlet container", "pc":{"r":260,"t":122},"movement":"t", "description": "Embedding a servlet container, such as Jetty, inside a Java application has many advantages over running the application inside a container. Testing is relatively painless because of the simple startup, and the development environment is closer to production. Nasty surprises like mismatched versions of libraries or drivers are eliminated by not sharing across multiple applications. While you will have to manage and monitor multiple Java Virtual Machines in production using this model, we feel the advantages offered by the simplicity and isolation are significant. "},
                 {"tip":"EvtAPIs","name":"Event API's", "pc":{"r":255,"t":170},"movement":"c", "description": "RESTful APIs have become standard in our industry. A good REST API provides a simple, lightweight means of building customizations and integrations. However, many of the quick, high value integrations we’d like to build require knowing when something happened. Consider building an event API, which, when used in conjunction with a REST API, facilitates simple workflow, notification, and synchronization integrations. These integrations often require no more than 20 or 30 lines of code."},
                 {"tip":"DevInfra","name":"Infrastructure automation of development workstations", "pc":{"r":215,"t":110},"movement":"t", "description": "Automation is one of the core practices of Continuous Delivery. While companies are getting better at automating the management of infrastructure and environments, one commonly forgotten aspect is infrastructure automation of development workstations. This leads to huge gains in productivity by avoiding manually building specific environments and allows a seamless pairing environment. As with other parts of the environment, tools like Puppet and Chef can be used though they are not entirely necessary as the judicious use of platform packaging and language build tools can be sufficient."},
                 {"tip":"FuncTest","name":"Out of container functional testing", "pc":{"r":260,"t":140},"movement":"t", "description": "With the popularity of embedded HTTP servers increasing, so has the technique of out-of-container functional testing. That is writing tests at the boundary of the system, using a mock container to provide both fast feedback and high coverage. Servers such as Jetty and tools like Plasma for the .Net platform can provide a significant reduction in the time it takes to run your test suite."},
                 {"tip":"PerfTest","name":"Performance testing as a first class citizen", "pc":{"r":180,"t":95},"movement":"t", "description": "While unit and acceptance testing are widely embraced as standard development practices, this trend has not continued into the realm of performance testing. Currently, the common tooling drives testers towards creating throw away code and a click and script mentality. Treating performance testing as a first class citizen enables the creation of better tests that cover more functionality, leading to better tooling to create and run performance tests, resulting in a test suite that is maintainable and can itself be tested. "},
                 {"tip":"1 cmd ...","name":"Single command deploy", "pc":{"r":215,"t":91},"movement":"t", "description": "A key step in the Continuous Delivery process is the ability to release software arbitrarily close to when the business wants it. The ability to do single command deploy relies on a complete set of activities that fall under the umbrella of Continuous Delivery including extensive automation of everything from build/test to scripted environment provisioning and deployment. We have found that adopting this as a goal tends to drive the automation and testing pre-requisites upstream into the rest of your organization. "},
                 {"tip":"Caching","name":"Thoughtful Caching", "pc":{"r":200,"t":144},"movement":"c", "description": "All too often caching is an afterthought used to address performance problems with a blanket approach and common cache lifetime. This leads to issues and workarounds. The “time value” of information is inherently linked to the business purpose and hence needs to be captured at the same time as other requirements. We believe thoughtful caching should be addressed early in the project and not just treated as a last minute performance fix. "},
                 {"tip":"Win Infra","name":"Windows Infrastructure Automation", "pc":{"r":260,"t":102},"movement":"t", "description": "Mature tools such as PowerShell, together with newer options such as Chef and Puppet, lead us to highlight Windows infrastructure automation on this edition of the Technology Radar. Manual configuration using a mouse and menu options is slow and leads to misconfiguration and ‘snowflake’ machines in an unknown state. We recommend command-line tools for their clarity and scriptability. "},
                 {"tip":"Evt Source","name":"Event Sourcing", "pc":{"r":290,"t":144},"movement":"c", "description": "Event sourcing is an approach to thinking about persistent data where the primary record is a log of all events that make updates. A traditional representation of database state can be entirely recreated by reprocessing this event log. Event sourcing’s benefits include strong auditing, creation of historic state, and replaying of events for debugging and analysis. Event sourcing has been around for a while, but we think it is used much less than it should be. "},
                 {"tip":"XD","name":"Experience Design (XD)", "pc":{"r":312,"t":119},"movement":"t", "description": "Experience Design (XD) is an example of ways in which agility must evolve to accommodate real-world constraints. We are always interested in finding innovative ways to incorporate what have traditionally been up-front exercises into practices like Continuous Delivery. XD is a ripe field for study. "},
                 {"tip":"MechSym...","name":"Mechanical sympathy", "pc":{"r":290,"t":160},"movement":"t", "description": "There is a worrying trend that developers are becoming too distant from the hardware on which their code runs. Increasing virtualization and separation between development and operations makes this worse. In stark contrast some teams are writing code that leverages mechanical sympathy to get incredibly high performance from their software. The LMAX Disruptor is an open-source example in Java. For high performance cases like finance and Big Data, getting closer to the metal can yield big returns."},
                 {"tip":"μServices","name":"Micro-services", "pc":{"r":300,"t":177},"movement":"t", "description": "Micro-services, often deployed out-of-container or using an embedded http server are a move away from traditional large technical services. The approach trades benefits such as maintainablity for operational complexity. These drawbacks are typically addressed using infrastructure automation and continuous deployment techniques. On balance, micro-services are an effective way of managing technical debt and handling different scaling characteristics especially when deployed in a service oriented architecture built around business capabilities."},
                 {"tip":"ProdImmune...","name":"Production immune system", "pc":{"r":290,"t":112},"movement":"t", "description": "Continuous delivery techniques are shortening the “last mile” to get changes into production, allowing more frequent feature releases. A production immune system tracks changes as they are put into production, and automatically rolls back changes that have a negative effect on key metrics, such as revenue. Solid metrics, as well as automated A/B deployment, are required for this kind of aggressive rollback to be successful."},
                 {"tip":"DBInteg","name":"Database based integration", "pc":{"r":375,"t":120},"movement":"c", "description": "Awesome!"},
                 {"tip":"Fr Branch...","name":"Feature branching", "pc":{"r":375,"t":150},"movement":"c", "description": "Disappointingly, we continue to see development teams embrace the practice of feature branching to isolate work and defer integration. Feature branches commonly cause significant pain and unpredictability during late merges, but more importantly prevent the continual design improvement necessary to maintain high quality software. We recommend continuous integration and branch by abstraction as an alternative to feature branching. "},
                 {"tip":"InfraMgmt...","name":"Manual infrastructure management", "pc":{"r":375,"t":165},"movement":"c", "description": "Despite advances in automation, many people fall back on manual infrastructure management. We often see problems caused by manual configuration of firewalls and load balancers, and especially by DBAs cutting and pasting SQL scripts to run against production databases. All of these activities, if not fully automated, should at least be scripted and repeatable across environments. "},
                 {"tip":"ScrumCert","name":"Scrum certification", "pc":{"r":375,"t":105},"movement":"c", "description": "Awesome!"},
                 {"tip":"AppContainer","name":"Server / Application Container End of Life", "pc":{"r":375,"t":98},"movement":"t", "description": "A decade ago when memory was at a premium, application servers made a lot of sense. They were popular and useful as a mechanism to run and manage multiple applications on a shared server or cluster. These days applications are more often run on separate physical or virtual servers and the need for an application server is reduced. Consider evaluating server / application container end of life within your organization, and only use one if you benefit from the added complexity. "},
                 {"tip":"TestRec...","name":"Test recorders", "pc":{"r":375,"t":127},"movement":"t", "description": "Test recorders seem invaluable as they provide a quick way to capture navigation through an application. However, we strongly advise against their regular use, as it tends to result in brittle tests which break with small changes to the UI. The test code they produce tends to be relatively poor and riddled with unnecessary duplication. Most importantly, test recorders tend to cut channels of communication between the test automation and development teams. When faced with an application that is difficult to test through the user interface, the solution is to have a critical conversation between the teams to build a more testable UI. "},
                 {"tip":"Git","name":"Git", "pc":{"r":110,"t":70},"movement":"c", "description": "Starting from a challenge posed to the Linux community to stop using commercial version control, Git has proved itself. Git embodies a well architected, high performance implementation of distributed version control. Git is powerful, so it should be used with respect, but that power enables agile engineering workflows that simply cannot exist with other tools."},
                 {"tip":"Github","name":"Github", "pc":{"r":110,"t":65},"movement":"c", "description": "Git’s popularity is supported by the existence of GitHub. GitHub combines public and private Git repositories, social networking, and a host of other innovative tools and approaches. "},
                 {"tip":"InfraCode","name":"Infrastructure as Code", "pc":{"r":75,"t":45},"movement":"c", "description": "The DevOps movement continues to grow, with developers and operations staff working closely together to solve the “software last mile” problem. Infrastructure as code is a technique for treating infrastructure configuration in the same way as code; checking it into source control, then using it to push changes out to the data center. In addition to web server, application server and application configuration, we are seeing network configuration treated in the same way. Network switch, firewall and load balancer configuration can be infrastructure as code, and even changed at runtime."},
                 {"tip":"Backbone.js","name":"Backbone.js", "pc":{"r":295,"t":55},"movement":"c", "description": "Even though JavaScript increasingly plays a more important role in today’s world of software development, it is still troublesome to organize in a clean structure. Backbone.js is a library which provides an MVC (model view controller) framework for JavaScript heavy applications. It allows developers to write JavaScript code in a more manageable and testable way. "},
                 {"tip":"FPM","name":"FPM", "pc":{"r":225,"t":24},"movement":"t", "description": "There are many advantages to using OS-native packages to deploy components and dependencies, however the tools which build native packages for Linux are not trivial. FPM is a useful tool which makes it easy to create RPM, DEB, or Solaris packages with a minimum of fuss. "},
                 {"tip":"Frank","name":"Frank", "pc":{"r":245,"t":12},"movement":"t", "description": "Frank is an open source library that allows functional tests for iPhones and iPads to be written in Cucumber and executed on a remote device. This fills an important niche in iOS development where acceptance test-driven development was previously cumbersome and awkward. "},
                 {"tip":"Jade","name":"Jade", "pc":{"r":260,"t":34},"movement":"t", "description": "Awesome!"},
                 {"tip":"JSMicro","name":"JavaScript micro frameworks", "pc":{"r":255,"t":75},"movement":"t", "description": "With mobile applications on the rise, JavaScript size and performance is even more critical. JavaScript micro frameworks have emerged as a direct response to ‘bloat’ in some of the larger libraries. These small libraries do exactly one thing, such as DOM selection or MVC, and can be under one kilobyte in size. By combining a number of micro frameworks, developers can get exactly the functionality they need without the overhead of a larger library. Microjs.com hosts a collection of these micro frameworks, as well as a tool that can bundle them into a single library."},
                 {"tip":"JSTooling","name":"JavaScript tooling", "pc":{"r":250,"t":40},"movement":"t", "description": "JavaScript is now established as a powerful, mainstream language that can be used in a variety environments both on client and server sides. As JavaScript codebases expand, more JavaScript tooling support becomes necessary, especially in the continuous integration and testing spaces. Tools like Backbone.js, SpineJS, JavaScriptMVC, Jasmine, JSTestDriver and HRcov are coming to the forefront. They are created by a vibrant community that continues to grow. "},
                 {"tip":"LogAggreg...","name":"Log aggregation & indexing (was Splunk)", "pc":{"r":170,"t":45},"movement":"c", "description": "Application logs are both a blessing and a curse. They are comforting to have when a production issue arises, but actually digging out the data we need usually requires cobbling together scripts written in tools such as AWK and sed. Splunk is an elegant solution that quickly analyzes many standard log file formats like IIS, Log4J and syslog, and is extensible to custom formats. It indexes files, statically or in real time, to generate canned or custom reports. If the raw log fields do not provide what you need, simply use a regular expression, either inline or to define a new field, to get the desired level of detail. Splunk’s full power is difficult to describe, so we recommend downloading and trying it."},
                 {"tip":"MsgBuses","name":"Message Buses without smarts", "pc":{"r":140,"t":85},"movement":"c", "description": "Awesome!"},
                 {"tip":"NuGet","name":"NuGet", "pc":{"r":265,"t":27},"movement":"t", "description": "Package management systems are a widely accepted practice for incorporating third party libraries. Tools such as RubyGems, Maven and APT are available at both language and system level. NuGet is such a system for .Net. It consists of a Visual Studio IDE extension and a PowerShell module that opens the possibility for further improving build automation on the .Net platform. "},
                 {"tip":"Polyglot...","name":"Polyglot Persistence", "pc":{"r":225,"t":7},"movement":"t", "description": " Polyglot persistence is the technique of storing data in various data stores based on efficiency and how that data is going to be used. Do not use the default database, often an RDBMS, for all the needs of the application. Instead, ask questions like: Does session management data belong in the database or does it belong in a key-value store? Do relationships between customers and products belong in a graph database? Using NoSQL databases like MongoDB, Riak, Neo4J allows us to reconsider how data is treated, even within a single application."},
                 {"tip":"Powershell","name":"Powershell", "pc":{"r":160,"t":18},"movement":"c", "description": "Powershell is as important tool for managing Windows servers and applications. Built into Windows 2008 and Windows 7, Powershell allows Unix-like scripting and automation across a server farm. Scripts can be executed on remote machines, and a single command can manage hundreds of machines at once. Powershell scripts can deploy and configure applications and operating system components, and can be extended by writing .NET “commandlets.” "},
                 {"tip":"PSake","name":"PSake", "pc":{"r":235,"t":40},"movement":"t", "description": "PSake (pronounced 'sake' like the Japanese rice wine) is a build automation tool implemented in PowerShell. PSake provides a tidy syntax for declaring build tasks and dependencies without programming in XML. You also have access to all the features of PowerShell and the .Net framework from within your build scripts. "},
                 {"tip":"Vagrant","name":"Vagrant", "pc":{"r":165,"t":60},"movement":"c", "description": "The tool Vagrant makes it simple for teams to distribute virtualized development environments constructed using version-control friendly descriptors. Vagrant helps eliminate environmental differences in development and reduce troubleshooting waste. "},
                 {"tip":"Gradle","name":"Gradle", "pc":{"r":310,"t":80},"movement":"t", "description": "Gradle is an attempt to bring sanity to the enterprise build space by marrying best-of-breed tools with cutting edge techniques. Gradle allows you to interact with your existing Maven repositories, but adds scriptability to your builds with a clean domain specific language."},
                 {"tip":"jQuery-M","name":"jQuery Mobile", "pc":{"r":345,"t":40},"movement":"c", "description": "Thoughtworks has used jQuery Mobile on two projects with mobile websites and had mixed experiences. One project found the library very useful for dealing with device differences and graceful degradation on older browsers. On this project we were working in a way that fit with the jQuery Mobile approach. Our other project found the tool less useful and felt to some extent it was trying to force them to work a particular way that did not fit their application well. For these reasons we have decided to leave this tool in assess. If you are doing mobile web it is definitely worth spiking but it may not fit every application. "},
                 {"tip":"LogicFree...","name":"Logic-free markup", "pc":{"r":310,"t":55},"movement":"t", "description": "While MVC has been a staple of web development for the past few years, most libraries and frameworks fail to adhere to one of its most important principles: keeping logic out of the view layer. The consequences of not having logic-free markup include complex dependencies, difficulty testing and inability to reuse code. Recent DSLs like Mustache, are available for many languages and platforms and have started to turn the trend. They allow editing in any tool, without extra requirements for language support and provide huge gains for UI development and overall application design. "},
                 {"tip":"BI/ETL","name":"Open Source BI/ETL tools", "pc":{"r":310,"t":18},"movement":"c", "description": "Open source BI tools such as Pentaho, JasperSoft, CloverETL, Talend, BIRT and SpagoBI are matching features with the proprietary tools and allowing for easy entry into the BI space. We recommend that you assess them. "},
                 {"tip":"Riak","name":"Riak", "pc":{"r":310,"t":24},"movement":"t", "description": "Riak is a distributed key-value store that is schema-less and data-type agnostic, it can be put to good use in write heavy projects to store data such as sessions, shopping carts and streaming logs. The ability of the distributed cluster to self recover, distribute data across the cluster with tuneable consistency and availability settings, do collision detection and resolve those if needed can be helpful in high availability environments and provide interesting solutions in the architecture. "},
                 {"tip":"Sonar","name":"Sonar", "pc":{"r":290,"t":75},"movement":"c", "description": "Measuring software internal quality is still a mystery, even though many source code metrics have been around for years. The problem with those metrics is they usually only capture one aspect of quality. We must consult many metrics to come to a conclusion about the overall quality of our code. Sonar is an integrated tool for checking, tracking and visualizing those metrics. It not only combines metrics together, but also mixes them with historical measures, giving us a better insight into the internal quality of the codebase. "},
                 {"tip":"CodeConfig","name":"Code in Configuration", "pc":{"r":375,"t":72},"movement":"c", "description": "Many organizations try to minimize change in production IT environments. This frequently leads to behavioral anti-patterns. One example of this is over use of code in configuration to affect the behavior of production systems. Changes that really belong in code end up in configuration files which don’t necessarily pass through the same levels of testing as the application. Streamlining the path to production and focusing on quality simplifies rather than complicate things. "},
                 {"tip":"Cross P/F...","name":"Cross Platform Mobile Toolkits", "pc":{"r":375,"t":18},"movement":"c", "description": "With very few exceptions, tools that claimed to create seamless user experiences across Windows, Linux and OSX did not deliver. We ended up with compromised experiences on one or more of the operating systems. Mobile adds complexity to this problem with different hardware form factors and conventions for user interactions. We have made several attempts to use cross platform mobile toolkits on our projects with varying degrees of success. We saw issues like having to create a project for each platform or invoking specific native UI widgets to get things working. For these reasons we have put cross platform mobile toolkits in hold. While this may change in the future, we remain skeptical especially given past experiences on hardware that was far more homogeneous. "},
                 {"tip":"ESB","name":"Enterprise Service Bus", "pc":{"r":375,"t":36},"movement":"c", "description": "Awesome!"},
                 {"tip":"Maven","name":"Maven", "pc":{"r":375,"t":29},"movement":"t", "description": "Maven has long been a staple of build automation in the Java space. However, given its lack of flexibility and support for automation best practices, especially in the Continuous Delivery domain, the use of alternatives such as Gradle should be considered."},
                 {"tip":"VCS WF","name":"VCS with \"implicit workflow\"", "pc":{"r":375,"t":54},"movement":"c", "description": "Some tools seek to enable and facilitate different ways of working. Unfortunately other tools are created using a different premise, one of low trust in users and the need to enforce a predefined process. ClearCase and TFS do this. This makes version control systems with “implicit workflow” unsuitable tools for modern agile software development. Project methodologies and the best ways of working on a project need to emerge. Tools that enforce high ceremony around things like check in just get in the way and kill productivity. "},
                 {"tip":"ATOM","name":"ATOM", "pc":{"r":30,"t":202},"movement":"c", "description": "event APIs take the form of a “web hook” or callback mechanism, but don’t be afraid of using a poll-based Atom style either. An Atom event API scales cheaply and gives the client the power to guarantee delivery. "},
                 {"tip":"AWS","name":"AWS", "pc":{"r":115,"t":235},"movement":"c", "description": "Amazon continues to evolve the AWS cloud with services such as RDB, making it even easier to engineer and deploy cloud-based applications. Not every AWS feature is as mature as EC2 and S3, so you should carefully evaluate which AWS components to use. We feel comfortable recommending AWS where elasticity or on-demand computing are required. "},
                 {"tip":"H/W Care","name":"Care about hardware", "pc":{"r":75,"t":250},"movement":"t", "description": "Awesome!"},
                 {"tip":"H/W S/W","name":"Communication between those responsible for hardware and software developers", "pc":{"r":75,"t":265},"movement":"t", "description": "One of the principal mechanisms that allows agile software development to work is feedback loops. One common yet expensive broken feedback loop we have observed is the lack of communication between those responsible for hardware and software. The end result creates cost but not worth. You must view architecture holistically; neither hardware nor software has a full enough perspective to be successful alone. "},
                 {"tip":"KVM","name":"KVM", "pc":{"r":25,"t":245},"movement":"c", "description": "Awesome!"},
                 {"tip":"M Web","name":"Mobile Web", "pc":{"r":85,"t":210},"movement":"c", "description": "Mobile web was in our trial ring on previous radars, but we’ve moved it into adopt in recognition of the fact we have created many mobile web applications. We believe this is the right way to create web content for mobile devices. "},
                 {"tip":"PAAS","name":"Domain Specific PAAS", "pc":{"r":210,"t":258},"movement":"t", "description": "We find that many businesses are starting to build their own internal cloud deployment environments that can be easily replicated for development and testing environments. In many cases, provisioning is self service, and with a single keystroke, developers can create a set of hosts that implement core enterprise assets and collaborating systems. In a sense, this is a domain-specific PaaS offered to internal customers. "},
                 {"tip":"Heroku","name":"Heroku", "pc":{"r":265,"t":254},"movement":"c", "description": "Heroku is a beautifully simple Platform as a Service (PaaS). Although Heroku began as a Ruby on Rails platform, it is evolving to support a variety of languages and web frameworks, most recently Clojure. Heroku uses a standard stack and deploys applications with a simple Git push. Heroku’s recent acquisition by Salesforce.com has not diminished its service quality. "},
                 {"tip":"Linux...","name":"Linux containers", "pc":{"r":212,"t":195},"movement":"t", "description": "One style of virtualization that is particularly attractive for SaaS and PaaS implementations is the virtual container. Linux containers such as OpenVZ provide the isolation and management benefits of a virtual machine without the overhead usually associated with general-purpose virtualization. In the container model, the guest OS is limited to being the same as the underlying host OS, but that is not a serious limitation for many cloud applications. "},
                 {"tip":"Offline M...","name":"Offline mobile Webapps (just html5)", "pc":{"r":270,"t":240},"movement":"c", "description": "Awesome!"},
                 {"tip":"Pvt.Cloud","name":"Private clouds", "pc":{"r":220,"t":240},"movement":"t", "description": "Because of concerns over privacy and security, or a need to repurpose existing hardware investments, many businesses are choosing to implement their own private cloud. There are are a variety of products, both open source and commercial for this purpose, but it should be noted that compute, storage, and network management are only the starting points for a useful private cloud. There are many services and processes that must be custom implemented to provide a cloud facility that rivals the public offerings from Amazon, Rackspace, or others. "},
                 {"tip":"Tablet","name":"Tablet", "pc":{"r":170,"t":216},"movement":"c", "description": "Tablet devices provide a new model of computing. The next generation of tablets show the potential for new interaction paradigms, and we expect interest and innovation to continue to escalate. "},
                 {"tip":"UbiqComp","name":"Ubiquitous computing", "pc":{"r":165,"t":260},"movement":"c", "description": "Ubiquitous computing is tricky term as it covers many different ideas. What we find interesting and exciting at the moment is that both consumer and specialist mobile devices are increasingly based on commodity operating systems such as Android or iOS. This means that in many cases, software can be developed by organizations themselves, opening the door to innovative new applications without requiring expensive niche skills. Lower price points for the hardware also make this area more accessible, especially with peripherals like payment card readers, PIN key pads and high quality bar code scanners becoming available for both Android and iOS devices. When combined with features already available on these consumer devices, whole new ways of working open up. "},
                 {"tip":"WinPhone...","name":"Windows Phone 7", "pc":{"r":220,"t":211},"movement":"t", "description": "Windows Phone 7 has surprised even some of the long time critics of Windows platforms. After many failed attempts, Microsoft has managed not only to produce a mobile operating system that provides a user experience on par with the other major contenders in the space but also the development support to go with it. Microsoft is making Windows Phone 7 a viable competitor and another choice for a more integrated experience in the corporate arena. Whether it will be able to change adoption trends remains to be seen. "},
                 {"tip":"AppHarbor","name":"AppHarbor", "pc":{"r":290,"t":186},"movement":"t", "description": "AppHarbor is a Platform as a Service (PaaS) offering for the .Net platform using the same pricing model and structure pioneered by Heroku. It is a promising take on the deployment of .Net applications as it abstracts away most of the underlying configuration needs that come with the platform. It is maturing quickly and we expect it will see growing interest in time to come. "},
                 {"tip":"Cloud...","name":"Cloud foundry", "pc":{"r":310,"t":252},"movement":"c", "description": "Cloud Foundry is an open source Platform as a Service that can be deployed in your own data center or hosted by VMWare. At present Cloud Foundry supports Java/ Spring applications, Rails, Sinatra, Grails and Node.js. Additional services include MongoDB, MySQL and Redis. The platform seems to be enjoying active development with the recent addition of Scala and Lift support. Cloud Foundry is an interesting addition to the growing list of PaaS solutions. It is not clear what the relationship between vFabric and Cloud Foundry will be going forward. "},
                 {"tip":"GPGPU","name":"GPGPU", "pc":{"r":300,"t":190},"movement":"c", "description": "Awesome!"},
                 {"tip":"Hybrid...","name":"Hybrid clouds", "pc":{"r":310,"t":226},"movement":"t", "description": "Hybrid clouds describe a set of patterns that combine the best features of public clouds and private data centers. They allow applications to run in a private data center during normal periods then use rented space in a public cloud for overflow capacity during peak traffic periods. Another way to combine public and private clouds in an agile way is to use the elasticity and malleability of public clouds for developing and understanding an application's production characteristics, then moving it into permanent infrastructure in a private data center when it is stable. "},
                 {"tip":"Node.js","name":"Node.js", "pc":{"r":277,"t":202},"movement":"c", "description": "For many years JavaScript was predominantly used as a client side Web programming language, but a lightweight language such as JavaScript can easily be embedded in different environments, including the server side. Node.js allows developers to write applications in JavaScript on both client and server sides. Since most servers spend the majority of their time waiting for I/O operations, Node.js’ event driven non-blocking architecture is very efficient. Unlike thread-based solutions, Node.js does not need to wait for I/O operations to complete while processing incoming requests, making it a good choice when implementing high performance services."},
                 {"tip":"OpenSocial","name":"OpenSocial", "pc":{"r":320,"t":248},"movement":"t", "description": "OpenSocial is a specification that provides a standard way to share content between semi-trusted applications. While initially proposed for public facing social networking websites, it has possibly more potential within the corporate firewall, where the benefits of being able to share data and content between applications in a standard manner frequently outweigh the requirements of scale and security. "},
                 {"tip":"Async I/O","name":"Single threaded servers with asynchronous I/O", "pc":{"r":285,"t":197},"movement":"t", "description": "Node.js is just one example of a class of single threaded servers with asynchronous I/O that are seeing increased popularity. A traditional web or application server associates each incoming request with a thread until all the processing tasks associated with that request are complete and the response has been sent back. If any of those tasks involve I/O, the thread blocks while that I/O takes place. This approach can waste finite resources such as file descriptors and memory since each connection occupies a thread whether or not that thread is actually consuming CPU cycles. An alternative architecture is starting to emerge in implementations like Node.js (a Javascript server running on Google V8), Nginx (an open source web server and proxy), and Webbit (a Java application server), that uses a single thread to serve many connections, processing all I/O asynchronously. These servers support orders of magnitude more simultaneous connections because each one consumes far less resources. "},
                 {"tip":"vFabric","name":"vFabric", "pc":{"r":345,"t":192},"movement":"c", "description": "vFabric is a new Platform as a Service (PaaS) offering from VMWare. Based on enhanced versions of open-source web and messaging platforms Tomcat, Apache, and RabbitMQ, vFabric aims to deliver a Java based PaaS on a variety of cloud platforms. Currently supported platforms include VMForce, a collaboration between VMWare and force.com, Google App Engine and Amazon EC2. The addition of the GemFire in-memory distributed data management platform and Hyperic monitoring and management tool make vFabric an interesting set of technologies for Java developers looking to move to the cloud. "},
                 {"tip":"Buying...","name":"Buying solutions you can only afford one of", "pc":{"r":375,"t":232},"movement":"t", "description": "Many teams encounter problems that are caused by their test environment missing an expensive hardware component that is only present in production. While a pre-production environment in many cases cannot approach the scale of a production environment, all of its components should be present. We recommend not buying solutions you can only afford one of, such as SAN, firewalls or load balancers, as this prevents realistic testing anywhere but in production. "},
                 {"tip":"GWT","name":"GWT", "pc":{"r":375,"t":224},"movement":"c", "description": "GWT is a reasonable implementation of a poor architectural choice. GWT attempts to hide many of the details of the web as a platform by creating desktop metaphors in Java and generating JavaScript code to implement them. First, in many ways, JavaScript is more powerful and expressive than Java, so we suspect that the generation is going in the wrong direction. Secondly, it is impossible to hide a complex abstraction difference like that from event-driven desktop to stateless-web without leaky abstraction headaches eventually popping up. Third, it suffers from the same shortcomings of many elaborate frameworks, where building simple, aligned applications is quick and easy, building more sophisticated but not supported functionality is possible but difficult, and building the level of sophistication required by any non-trivial application becomes either impossible or so difficult it isn’t reasonable. "},
                 {"tip":"Portal","name":"Java portal servers", "pc":{"r":375,"t":235},"movement":"c", "description": "A continuing cause of delivery problems lies in the use of Java Portal Server packages. These problems occur in both open source and commercial portal platforms. The promised productivity of these platforms is hindered by their complex and unwieldy programming models and difficulty in automating deployment, data migration, and tests. Although product demos are compelling, the base features of portal products are often a poor fit for real web applications, while the extra advertised features such as single sign-on or search are usually already served by existing, targeted, enterprise assets. "},
                 {"tip":"RIA","name":"RIA", "pc":{"r":375,"t":247},"movement":"t", "description": "We have long been less than enthusiastic about RIA technologies such as Flash and Silverlight because of vendor lock-in potential, anemic support for agile engineering practices, and potential for overuse. It seems even the large vendors are starting to agree with us. Now that modern versions of HTML handle most of the common cases that formerly required RIA, we feel that new projects must have enormous justification and careful strategic thought before using any of these technologies. "},
                 {"tip":"VMInfra...","name":"Treating VM's like physical infrastructure", "pc":{"r":375,"t":261},"movement":"t", "description": "While virtualization is on the rise, some organizations are treating virtual machines like physical infrastructure. We frown on doing a full operating system install for each VM or using VMs for load testing. Virtual machines can be cloned, snapshotted, and manipulated in ways physical machines cannot, and also have vastly different performance characteristics than physical hardware. VMs should be used with full understanding of their benefits and limitations, otherwise you can really get into trouble with them. "},
                 {"tip":"WS-*","name":"WS-*", "pc":{"r":375,"t":190},"movement":"c", "description": "We are reiterating our advice that given the progress and acceptance of simpler web-as-platform techniques such as REST and OAuth and the known issues with WS-*, it should only be used cautiously. "},
                 {"tip":"0-Code...","name":"Zero-code packages", "pc":{"r":375,"t":201},"movement":"t", "description": "There are a number of enterprise software packages on the market that purport to offer flexible functionality with zero coding. This is certainly an appealing notion – that a non-technical business user could configure software to the unique requirements of any business without learning a programming language or hiring a professional software developer. However, it should be kept in mind that any change that affect the behavior of software in production, whether it is code, configuration, data, or environments, could cause defects or failures in the business system. Writing code is only one step in a professional software production lifecycle. The need for repeatable analysis, testing, build, and deployment does not go away because the system is modified via a drag-and-drop interface instead of a high-level programming language. When evaluating a zero-code package, ensure that the the product supports these processes and that you have the necessary IT support structures in place to implement them."},
                 {"tip":"LangLang","name":"Care about languages", "pc":{"r":75,"t":285},"movement":"t", "description": "The industry is experiencing something of a renaissance in programming languages. ThoughtWorks thinks it is time to start assessing which other languages will help your organization while taking stock of the useful lifetime remaining for your current choices. You need to care about languages. Traditionally structured organizations with separate support teams may find skills constrain choice, DevOps offers a path forwards here. "},
                 {"tip":"HTML5","name":"HTML 5", "pc":{"r":140,"t":330},"movement":"c", "description": "While HTML5 is an evolving standard, many elements have reached the stage where they can be safely used in production to create both on and offline mobile web applications. Based on our projects we think HTML5 is ready to be adopted for mobile web applications. As the standard continues to evolve we expect HTML5 will become an increasingly viable alternative to native applications with the distinct advantage of being inherently cross platform. "},
                 {"tip":"JS","name":"JavaScript as a first class language", "pc":{"r":80,"t":300},"movement":"c", "description": "Rich experiences delivered via the web to desktops, tablets and mobile devices rely heavily on JavaScript, and we continue to recommend treating JavaScript as a “first class” language within your application. Developers should carefully consider how they structure, test, refactor and maintain JavaScript code, applying the same rigor as they would with any other programming language. "},
                 {"tip":"Clojure","name":"Clojure", "pc":{"r":170,"t":292},"movement":"t", "description": "Clojure is a dynamic, functional language that runs on the JVM. Although its roots are in Lisp, one of the oldest computer languages, it also embodies many modern programming concepts, including lazy evaluation and advanced concurrency abstractions. Clojure has spawned a vibrant community of programmers who are contributing a rich set of frameworks and tools. One example of these is Midje, an innovative spin on unit testing and mocking frameworks "},
                 {"tip":"Coffeescript","name":"Coffeescript", "pc":{"r":240,"t":340},"movement":"c", "description": "JavaScript is a powerful, ubiquitous programming language with tricky and error prone syntax. Coffeescript fixes many of the warts of JavaScript in a clean, simple syntax that generates readable JavaScript. For example, creating true private variables in JavaScript is a syntactic nightmare; CoffeeScript generates the technically correct but hideous syntax. "},
                 {"tip":"DSL","name":"Domain-Specific Languages", "pc":{"r":170,"t":320},"movement":"c", "description": "Domain-Specific Languages is an old technique that we think is significantly under-used. We hope that the publication of Martin Fowler’s latest book will encourage more people to utilize them. "},
                 {"tip":"SASS","name":"SASS, SCSS, and LESS", "pc":{"r":210,"t":350},"movement":"c", "description": "CSS has been an extremely popular and effective DSL for styling web pages. It does, however, have some annoying limitations which have led to a number of languages that build on CSS to make it easier to write and modify. We’ve had good experiences with SASS, SCSS, and LESS. "},
                 {"tip":"Scala","name":"Scala", "pc":{"r":155,"t":300},"movement":"c", "description": "In the previous radar we had two JVM-based functional programming languages, Clojure and Scala, in our Assess category. We had expressed a slight preference for Clojure because it is the smaller and more focused language. Since the last radar we have realized that the wider applicability of Scala makes it more approachable for enterprise developers, and we have witnessed great successes in the adoption of Scala. Consequently we have moved Scala into our Trial category. Pay careful attention to the idiomatic use of Scala if it is introduced to a new team to avoid “Java without semicolons” or Perl styles. "},
                 {"tip":"ClojureScript","name":"ClojureScript", "pc":{"r":290,"t":286},"movement":"t", "description": "ClojureScript illustrates just how cross-platform the core of Clojure really is: they ported the primary parts to run on JavaScript. It is missing some of the whizz-bang features of Clojure on the JVM and CLR, like software transactional memory, but has a surprisingly high fidelity with its more sophisticated cousins. One interesting option afforded by ClojureScript is the ability to send data structures à la JSON using ClojureScript as the data structure. Because Clojure is a Lisp, this means that you can also send “real” code. "},
                 {"tip":"F#","name":"F#", "pc":{"r":290,"t":320},"movement":"c", "description": "Microsoft's F# continues to evolve, with the recent release of F# 3.0 beta. F# is excellent at concisely expressing business and domain logic. Developers trying to achieve explicit business logic within an application may opt to express their domain in F# with the majority of plumbing code in C#. "},
                 {"tip":"funcJava","name":"Functional java", "pc":{"r":320,"t":356},"movement":"t", "description": "Functional programming continues its slow but steady ascent into developer mind share and, increasingly, code bases. New languages like Clojure, Scala, and F# offer great new features. Now libraries such as Functional Java, TotallyLazy and LambdaJ are back porting some functional language capabilities, particularly around higher-order functions and collections, into Java. We like this trend because it previews common capabilities of future languages yet allows developers to stay in their comfort zone. "},
                 {"tip":"Java...","name":"Future of Java", "pc":{"r":325,"t":330},"movement":"c", "description": "The purchase of Sun, and thus their Java assets, by Oracle introduced uncertainty regarding the future of Java. This uncertainty continues despite the recent announcements of Oracle’s Java roadmap, which had both encouraging and worrying aspects. As a result we continue to highlight the issue. We recommend monitoring the situation rather than any immediate actions to move off the platform. "},
                 {"tip":"G-Dart","name":"Google Dart", "pc":{"r":375,"t":294},"movement":"t", "description": "Dart is Google's attempt at creating a programming language to replace JavaScript due to JavaScript's perceived flaws and inherent performance issues. Dart, in line with previous Google languages, provides Java-like syntax and semantics that are intended to be more appealing than JavaScript's prototype-based nature. Reception within the browser-development community has been understandably cool and it remains to be seem if the language will become more widely accepted, though Chrome's continued rise and the search for alternatives like CoffeeScript may yet shift that balance."},
                 {"tip":"StoredProc","name":"Logic in stored Procedures", "pc":{"r":375,"t":315},"movement":"c", "description": "It is startling to us that we continue to find new systems in 2011 that implement significant business logic in stored procedures. Programming languages commonly used to implement stored procedures lack expressiveness, are difficult to test, and discourage clean modular design. You should only consider stored procedures executing within the database engine in exceptional circumstances, where there is a proven performance issue. top^ "}
                 ],
    "radar_quadrants" : [
                         {"name":"Techniques", "start":0, "end":34},
                         {"name":"Tools", "start":34, "end":61},
                         {"name":"Platforms", "start":61, "end":90},
                         {"name":"Languages", "start":90, "end":104}
                         ],
    "radar_arcs" : [{"r":150,"tip":"","name":"Adopt"},{"r":275,"tip":"","name":"Trial"},{"r":350,"tip":"","name":"Assess"},{"r":400,"tip":"","name":"Hold"}],
    "radar_title" : "ThoughtWorks Technology Radar (March 2012)"
}